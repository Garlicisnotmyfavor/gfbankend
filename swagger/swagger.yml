swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /api/user/{id}:
    get:
      tags:
      - api/user
      description: show all cards
      operationId: UserController.showAllCards
      parameters:
      - in: path
        name: userID
        description: 用户ID
        required: true
        type: string
      responses:
        "200":
          description: Read successfully
        "404":
          description: Fail to read
  /api/user/ForgetPW/New:
    put:
      tags:
      - api/user
      description: 通过前面忘记密码的过程后，设置新的密码
      operationId: UserController.NewPassword
      parameters:
      - in: body
        name: userInfo
        description: 用户信息(需要的是用户ID，新密码）
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: Update successfully
        "400":
          description: 解析body失败
        "404":
          description: 数据库无此用户
        "406":
          description: 更新密码失败
  "/api/user/card/{id\t[get]}":
    get:
      tags:
      - api/user
      description: 将这张卡片的所有信息传出去
      operationId: CardController.GetCardIDInfo
      parameters:
      - in: path
        name: id
        description: 查询的卡号
        required: true
        type: string
      responses:
        "200":
          description: 查询成功
        "400":
          description: 查询不到对应的卡
        "401":
          description: 查询不到对应的公司
  /api/user/card/{id}/coupons:
    post:
      tags:
      - api/user
      description: 增加或减少某张卡的某种优惠券
      operationId: CardController.coupons
      parameters:
      - in: path
        name: id
        description: 卡号
        required: true
        type: string
      - in: body
        name: Increment
        description: 优惠券改变的数量，可以为负数
        required: true
        schema:
          format: int64
          type: integer
        type: integer
        format: int64
      responses:
        "200":
          description: 成功
        400/403/404/406:
          description: json解析错误/优惠券不足/卡不存在/非法数据
  /api/user/card/{id}/delete:
    post:
      tags:
      - api/user
      description: 删除卡片
      operationId: CardController.delete
      parameters:
      - in: path
        name: id
        description: 卡号
        required: true
        type: string
      responses:
        "200":
          description: ""
        400/404:
          description: json解析错误/卡不存在
  /api/user/card/{id}/info:
    put:
      tags:
      - api/user
      description: 修改卡片的卡号，公司
      operationId: CardController.ModifyCardInfo
      parameters:
      - in: path
        name: id
        description: 原本的卡号
        required: true
        type: string
      - in: body
        name: cardInfo
        description: 新卡信息(卡号CardId+公司Enterprise)
        required: true
        schema:
          $ref: '#/definitions//'
      responses:
        "200":
          description: 修改成功，返回新卡片对象
          schema:
            $ref: '#/definitions/models.Card'
        "400":
          description: body解析错误
        "404":
          description: 卡片信息读取错误
        "500":
          description: 数据库更新操作错误
  /api/user/card/{id}/score:
    put:
      tags:
      - api/user
      description: 操作卡片的积分
      operationId: CardController.UseScore
      parameters:
      - in: body
        name: id
        description: CardId(string)+increment(int)
        required: true
        schema:
          $ref: '#/definitions//'
      responses:
        "200":
          description: 修改成功，返回新卡片对象
          schema:
            $ref: '#/definitions/models.Card'
        "400":
          description: body解析错误
        "406":
          description: 积分信息有误
        "500":
          description: 数据库更新操作错误
  /api/user/card/add:
    post:
      tags:
      - api/user
      description: 将这个user的id和卡绑定,由cookie获取sessionid从而得到当前用户ID
      operationId: CardController.AddCard
      parameters:
      - in: body
        name: id
        description: 原本的卡号cardid+企业enterprise
        required: true
        schema:
          $ref: '#/definitions/\'
      responses:
        "200":
          description: 返回绑定的卡的大致信息
          schema:
            $ref: '#/definitions/models.Card'
        "400":
          description: 解析错误
        "402":
          description: 数据不匹配
        "403":
          description: 绑定的卡片不存在
  /api/user/enroll:
    get:
      tags:
      - api/user
      description: send random code when user enroll
      operationId: UserController.getRanCodeInRegister
      parameters:
      - in: body
        name: email
        description: 用户的邮箱
        required: true
        schema:
          type: string
        type: string
      responses:
        "200":
          description: "string\t\"生成的验证码\""
        "400":
          description: 解析body失败
        "500":
          description: 发送邮件失败
    post:
      tags:
      - api/user
      description: user register
      operationId: UserController.Register
      parameters:
      - in: body
        name: userInfo
        description: 用户所填信息
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '"OK"'
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 解析body错误
        "403":
          description: 数据库插入错误
        "406":
          description: 账号信息格式有误
  /api/user/forgetPw:
    post:
      tags:
      - api/user
      description: Forget password
      operationId: UserController.ForgetPW
      parameters:
      - in: body
        name: userInfo
        description: 用户信息(需要的是用户ID，邮件）
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: successfully
        "400":
          description: 解析body失败
        "404":
          description: 数据库无此用户
  /api/user/login:
    get:
      tags:
      - api/user
      description: user login with cookie
      operationId: UserController.LoginWithCookie
      parameters:
      - in: header
        name: remember
        description: 是否记住密码bool型
        required: true
        type: boolean
      responses:
        "200":
          description: Register successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 信息内容或格式有误
        "406":
          description: 数据库查询报错，可能用户所填账号或密码错误
    put:
      tags:
      - api/user
      description: user login
      operationId: UserController.Login
      parameters:
      - in: body
        name: userInfo
        description: account(string)+password(string)+accounttype(string)为mail或者phone
        required: true
        schema:
          $ref: '#/definitions/\'
      responses:
        "200":
          description: Register successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 信息内容或格式有误
        "406":
          description: 数据库查询报错，可能用户所填账号或密码错误
  /api/user/password:
    put:
      tags:
      - api/user
      description: change password
      operationId: UserController.changePW
      parameters:
      - in: body
        name: userInfo
        description: 用户信息(需要的是用户ID，新密码）
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: Update successfully
        "400":
          description: 解析body失败
        "404":
          description: 数据库无此用户
        "406":
          description: 更新密码失败
definitions:
  /:
    title: /
    type: object
  \:
    title: \
    type: object
  models.Card:
    title: Card
    type: object
    properties:
      BatchNum:
        type: integer
        format: int64
      CardId:
        type: string
      CardOrder:
        type: integer
        format: int64
      CardType:
        type: string
      City:
        type: string
      Coupons:
        type: string
      CouponsNum:
        type: integer
        format: int64
      DelTime:
        type: string
        format: datetime
      Enterprise:
        type: string
      ExpireTime:
        type: string
        format: datetime
      FactoryNum:
        type: integer
        format: int64
      Money:
        type: integer
        format: int64
      Score:
        type: integer
        format: int64
      SerialNum:
        type: integer
        format: int64
      State:
        type: string
      UserId:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      LoginMonth:
        type: string
      LoginNum:
        type: integer
        format: int64
      LoginYear:
        type: string
      Mail:
        type: string
      Password:
        type: string
      Tel:
        type: string
