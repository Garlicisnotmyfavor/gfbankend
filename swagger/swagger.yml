swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /api/user/:
    get:
      tags:
      - api/user
      description: show all cards
      operationId: UserController.showAllCards
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.Card'
      responses:
        "200":
          description: Read successfully
        "404":
          description: Fail to read
  /api/user/{id}: {}
  /api/user/avatar:
    post:
      tags:
      - api/user
      description: upload avatar
      operationId: UserController.UpAvatar
      parameters:
      - in: header
        name: id
        description: file
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: upload successfully
        "500":
          description: Fail to save picture
        "502":
          description: Fail to close uploading file
  /api/user/card:
    post:
      tags:
      - api/user
      description: insert card
      operationId: CardController.Post
  /api/user/card/{id}:
    get:
      tags:
      - api/user
      description: get card
      operationId: CardController.Get
  /api/user/card/{id}/remark: {}
  /api/user/card/help/{Ename}:
    get:
      tags:
      - api/user
      description: get help message by the given enterprise_name
      operationId: CardController.Get
      parameters:
      - in: query
        name: body
        description: enterprise_name
        required: true
        type: string
      responses:
        "200":
          description: ""
        "404":
          description: read error
  /api/user/join:
    post:
      tags:
      - api/user
      description: user register
      operationId: UserController.Register
      parameters:
      - in: body
        name: user
        description: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '"OK"'
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Fail to unmarshal json
        "403":
          description: Fail to insert
        "406":
          description: Illegal account form
  /api/user/login:
    put:
      tags:
      - api/user
      description: user login
      operationId: UserController.Login
      parameters:
      - in: body
        name: userInfo
        description: 给出账号，密码即可登录
        required: true
        schema:
          $ref: '#/definitions/UserJson'
      responses:
        "200":
          description: Register successfully
        "400":
          description: illegal account form
        "401":
          description: Fail to login
  /api/user/password:
    put:
      tags:
      - api/user
      description: change password
      operationId: UserController.changePW
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: Update successfully
        "400":
          description: Fail to unmarshal json
        "404":
          description: Fail to read
        "500":
          description: Fail to update
    post:
      tags:
      - api/user
      description: send feedback mail
      operationId: UserController.Feedback
      responses:
        "200":
          description: Update successfully
        "500":
          description: Fail to send mail
definitions:
  UserJson:
    title: UserJson
    type: object
  models.Card:
    title: Card
    type: object
    properties:
      BatchNum:
        type: string
      City:
        type: string
      EName:
        type: string
      FactoryNum:
        type: string
      Id:
        type: string
      Kind:
        type: string
      RegisterTime:
        type: string
        format: datetime
      Remark:
        type: string
      SerialNum:
        type: string
      State:
        type: string
      Style:
        type: string
      UserId:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Mail:
        type: string
      Password:
        type: string
      Tel:
        type: string
